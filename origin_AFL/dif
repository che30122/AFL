46,47d45
< #include <float.h>
< #include <math.h>
107,108d104
< EXP_ST u8 *cfg_file;
< 
160,162d155
< /*che fuzz for edge_num record*/
< EXP_ST u64 edge_num[MAP_SIZE];
< EXP_ST double edge_prob[MAP_SIZE];
249,251d241
< 	u8 trace_bit[MAP_SIZE];
< 	double prob;
< 	char prob_level;
300,306d289
< struct node{
< 	u16 id;
< 	u32 succ_num;
< 	struct node **succ_list;
< 	u16* hv_list;
< };
< struct node* cfg[MAP_SIZE];
359,634d341
< static void init_edge_num(){
< 	memset(edge_num,0,sizeof(edge_num));
< }
< 
< static void update_edge_num(){
< 	u32 i;
< 	for(i=0;i<MAP_SIZE;i++){
< 		edge_num[i]+=trace_bits[i];
< 	}
< }
< 
< /*static void update_per_edge_prob(){
< 	u32 i;
< 	for(i=0;i<MAP_SIZE;i++){
< 		if(trace_bits[i]){
< 			u32 succ_num=cfg
< 		}
< 	}
< }*/
< static void init_edge_prob(){
< 	u32 i;
< 	for(i=0;i<MAP_SIZE;i++)
< 		edge_prob[i]=0.03;
< }
< static double cal_prob(struct queue_entry* q){
< 	u32 i;
< 	q->prob=1;
< 	for(i=0;i<MAP_SIZE;i++){
< 		if(q->trace_bit[i])
< 			q->prob*=edge_prob[i];
< 	}
< }
< 
< static void update_edge_prob(){
< 	u32 i;
< 	for(i=0;i<MAP_SIZE;i++){
< 		if(cfg[i]){
< 			u32 succ_num=cfg[i]->succ_num;
< 			u64 total=0;
< 			u32 j=0;
< 			for(j=0;j<succ_num;j++){
< 				total+=edge_num[cfg[i]->hv_list[j]];
< 			}
< 			if(total==0)
< 				continue;
< 			for(j=0;j<succ_num;j++){
< 				if(edge_num[cfg[i]->hv_list[j]]==0){
< 					edge_prob[cfg[i]->hv_list[j]]=0.03;
< 					continue;
< 				}
< 				double prob=(double)edge_num[cfg[i]->hv_list[j]]/(double)total;
< 				/*if(prob==0)
< 					prob=0.03;*/
< 				edge_prob[cfg[i]->hv_list[j]]=prob;
< 				//printf("")		
< 				if(total>50000000){
< 					edge_num[cfg[i]->hv_list[j]]=(u64)floor(1000000*prob);
< 				}
< 			}
< 		}
< 	}
< }
< static void update_per_prob_level(struct queue_entry* q){
<   	double prob_sum=0.0,prob_pow_sum=0.0;
< 	double level[9];
< 	double q_count=0;
< 	double means,sigma;
<   	struct queue_entry* q_top=queue_top;
< 	u32 i;
< 	//q->prob=cal_prob(q);
< 	while(q_top){
< 		if(q_top==q){
< 			q->prob=cal_prob(q);
< 		}
< 		prob_sum+=q_top->prob;
< 		prob_pow_sum+=(q_top->prob*q_top->prob);
< 		q_count++;
< 		q_top=q_top->next;
< 	}
< 	means=prob_sum/q_count;
< 	sigma=sqrt(prob_pow_sum/q_count-means*means);
< 	level[0]=0.0;
< 	level[8]=DBL_MAX;
< 	int b=-3;
< 	for(i=1;i<8;i++){
< 		level[i]=means+b*sigma;
< 		b++;
< 	}
< 	//judge level
< 	for(i=0;i<8;i++){
< 		if(q->prob>=level[i] && q->prob<level[i]){
< 			q->prob_level=i;
< 		}
< 	}
< 	
< }
< static void update_prob_level(){	
<   	update_edge_prob();
<   	double prob_sum=0.0,prob_pow_sum=0.0;
< 	double level[9];
< 	double q_count=0;
< 	double means,sigma;
<   	struct queue_entry* q=queue_top;
< 	u32 i=0;
<   	while(q){
< 		q->prob=cal_prob(q);
< 		prob_sum+=q->prob;
< 		prob_pow_sum+=(q->prob*q->prob);
< 		q_count++;
< 		q=q->next;
< 	}
< 	means=prob_sum/q_count;
< 	sigma=sqrt(prob_pow_sum/q_count-means*means);
< 	level[0]=0.0;
< 	level[8]=DBL_MAX;
< 	int b=-3;
< 	for(i=1;i<8;i++){
< 		level[i]=means+b*sigma;
< 		b++;
< 	}
< 	q=queue_top;
< 	while(q){
< 		for(i=0;i<8;i++){
< 			if(q->prob>=level[i] && q->prob<level[i]){
< 				q->prob_level=i;
< 			}
< 		}
< 		q=q->next;
< 	}
< }
< 
< static void update_prob_per_run(struct queue_entry* q){
< 	update_edge_num();
< 	update_edge_prob();
< 	update_per_prob_level(q);
< }
< 
< static void show_edge_prob(){
< 	u32 i;
< 	printf("show_edge_prob\n");
< 	for(i=0;i<MAP_SIZE;i++){
< 		if(edge_num[i]!=0)
< 			printf("%x edge num %d\n",i,edge_num[i]);
< 		if(edge_prob[i]!=0.03)
< 			printf("%x prob: %lf\n",i,edge_prob[i]);
< 	}
< 
< 	//getchar();
< }
< static void allocate_list(struct node* node,u32 succ_num){
< 	node->succ_num=succ_num;
< 	if(node->succ_num<=0)
< 		return ;
< 	u16* tmp=(u16*)malloc(sizeof(u16)*node->succ_num);
< 	struct node** tmp2=(struct node**)malloc(sizeof(struct node*)*node->succ_num);
< 	for(int i=0;i<node->succ_num;i++){
< 		tmp2[i]=NULL;
< 	}
< 	if(tmp==NULL || tmp2==NULL)
< 		exit(-1);
< 	node->hv_list=tmp;
< 	node->succ_list=tmp2;
< 	return;
< }
< static struct node* new_node(u16 id,u32 succ_num){
< 	struct node* newptr=(struct node*)malloc(sizeof(struct node));
< 	if(newptr==NULL){
< 		//TODO print msg for out of memory
< 		exit(-1);
< 	}
< 	newptr->id=id;
< 	newptr->succ_num=succ_num;
< 	newptr->hv_list=NULL;
< 	newptr->succ_list=NULL;
< 	if(newptr->succ_num>0){
< 		allocate_list(newptr,newptr->succ_num);
< 	}
< 	/*else{
< 		newptr->hv_list=NULL;
< 		newptr->succ_list=NULL;
< 	}*/
< 	return newptr;
< }
< static void handle_collision(u16 id,u32 succ_num){
< 	if(!cfg[id])
< 		exit(-1);
< 	if(cfg[id]->succ_num!=succ_num){
< 		//need reallocate
< 		//cfg[id]->succ_num=succ_num;
< 		free(cfg[id]->hv_list);
< 		cfg[id]->hv_list=NULL;
< 		/*for(int i=0;i<cfg[id]->succ_num;i++){
< 			free(cfg[id]->succ_list[i]);
< 			cfg[id]->succ_list[i]=NULL;
< 		}*/
< 		free(cfg[id]->succ_list);
< 		cfg[id]->succ_list=NULL;
< 		allocate_list(cfg[id],succ_num);
< 	}
< }
< __attribute__((optimize(0))) static void init_cfg(){
< 	u16 id;
< 	u32 succ_num;
< 	u32 i;
< 	FILE* fptr=fopen(cfg_file,"r");
< 	for(i=0;i<MAP_SIZE;i++)
< 		cfg[i]=NULL;
< 	//memset(cfg,0,sizeof(cfg));
< 		
< 	if(fptr==NULL){
< 		printf("can not open CFG file %s\n",cfg_file);
< 		exit(-1);
< 	}
< 	printf("init CFG start ....\n");
< 	while(fscanf(fptr,"%hx",&id)==1){
< 		fscanf(fptr,"%x",&succ_num);
< 		printf("%x %x\n",id,succ_num);
< 		char newline;
< 		u16 succ_id;
< 		if(cfg[id]==NULL){
< 			struct node* newptr=new_node(id,succ_num);
< 			cfg[id]=newptr;
< 		}
< 		else if(succ_num>0 && cfg[id]->succ_num==0){ //handle for pre allocate 
< 			allocate_list(cfg[id],succ_num);
< 		}
< 		//TODO need to handle collision case
< 		handle_collision(id,succ_num);
< 		for(i=0;i<cfg[id]->succ_num;i++){
< 			fscanf(fptr,"%hx",&succ_id);
< 			//printf("%x ",succ_id);
< 			if(cfg[succ_id]==NULL){//pre allocate
< 				cfg[succ_id]=new_node(succ_id,0);
< 			}
< 			cfg[id]->succ_list[i]=cfg[succ_id];
< 			cfg[id]->hv_list[i]=((id>>1) ^succ_id);
< 			printf("%x ",cfg[id]->hv_list[i]);
< 		}
< 
< 		fscanf(fptr,"%c",&newline);
< //		getchar();
< 	}
< 	printf("load CFG success\n");
< }
< static void print_cfg(){
< 	u32 i;
< 	for(i=0;i<MAP_SIZE;i++){
< 		if(cfg[i]!=NULL){
< 			u32 j;
< 			printf("%x %lx ",i,cfg[i]->succ_num);
< 	//		getchar();
< 			for(j=0;j<cfg[i]->succ_num;j++){
< 				printf("%x ",cfg[i]->hv_list[j]);
< 			}
< 			printf("\n");
< 		}
< 	}
< }
< static void destory_cfg(){
< 	u32 i;
< 	for(i=0;i<MAP_SIZE;i++){
< 		if(cfg[i]){
< 			if(cfg[i]->succ_list){
< 				free(cfg[i]->succ_list);
< 				cfg[i]->succ_list=NULL;
< 			}
< 			if(cfg[i]->hv_list){
< 				free(cfg[i]->hv_list);
< 				cfg[i]->hv_list=NULL;
< 
< 			}
< 			free(cfg[i]);
< 			cfg[i]=NULL;
< 		}
< 	}
< }
1098,1099c805
< //printf("add to queue\n");
< //getchar();
---
> 
1106,1110c812
< 	/*che fuzz*/
<   	memcpy(q->trace_bit,trace_bits,sizeof(q->trace_bit));
< 	//need to update q->prob_
< 	//update_per_prob_level(q);
< 	update_prob_per_run(q);
---
> 
1133a836
> 
1205c908
< 	u8* virgin_addr=virgin_map;
---
> 
1223,1224c926
< 	u32 edge_index=0;
< 	u32 j=0;
---
> 
1247a950
> 
1261,1276c964
<     u8* cur = (u8*)current;
<     u8* vir = (u8*)virgin;
< /*#ifdef WORD_SIZE_64
< 	
< 	
< 	edge_index=i<<3;
< 
< 	for(j=0;j<8;j++){
< 		edge_num[edge_index+j]+=cur[j];
< 	}
< #else
< 	edge_index=i<<2;
< 	for(j=0;j<4;j++){
< 		edge_num[edge_index+j]+=cur[j];
< 	}
< #endif*/
---
> 
1281c969
< 	
---
> 
1283,1291c971
< 	/*if(virgin_addr == &virgin_bits){
<     		for(i=0;i<MAP_SIZE;i++){
< 	    		edge_num[i]+=trace_bits[i];
<     		}
< 	}*/
<   //beacuse this func will be call after every exec so I insert here
<   /*update_edge_num();
<   update_edge_prob();
<   update_per_prob_level();*/
---
> 
1589c1269
< 	char prob_level=q->prob_level;
---
> 
1600,1602c1280
< 	char top_rated_prob_level=top_rated[i]->prob_level;
< 	if(prob_level>top_rated_prob_level) continue;
< 	else if(prob_level == top_rated_prob_level){
---
> 
1604c1282
< 	}
---
> 
4718c4396
< //show_edge_prob();
---
> 
5077,5081c4755
< 	/*switch(q->prob_level){
< 		case 0:
< 			perf_score=300;
< 			break;
< 	}*/
---
> 
5103,5129c4777
< 	switch(q->prob_level){
< 		case 0:
< 			perf_score*=5;
< 			break;
< 
< 		case 1:
< 			perf_score*=3;
< 			break;
< 		case 2:
< 			perf_score*=1.5;
< 			break;
< 		case 3:
< 			perf_score*=1;
< 			break;
< 		case 4:
< 			perf_score/=1;
< 			break;
< 		case 5:
< 			perf_score/=1.5;
< 			break;
< 		case 6:
< 			perf_score/=3;
< 			break;
< 		case 7:
< 			perf_score/=5;
< 			break;
< 	}
---
> 
8150c7798
<   while ((opt = getopt(argc, argv, "+i:o:f:F:m:b:t:T:dnCB:S:M:x:QV")) > 0)
---
>   while ((opt = getopt(argc, argv, "+i:o:f:m:b:t:T:dnCB:S:M:x:QV")) > 0)
8335,8341d7982
< 	/*specify cfg_file path*/
< 	case 'F':
< 
<         	if (cfg_file) FATAL("Multiple -o options not supported");
<         	cfg_file = optarg;
<         	break;
< 
8348,8350c7989
<   //if (optind == argc || !in_dir || !out_dir) usage(argv[0]);
< 
<   if (optind == argc || !in_dir || !out_dir || !cfg_file) usage(argv[0]);
---
>   if (optind == argc || !in_dir || !out_dir) usage(argv[0]);
8424,8431d8062
< //TODO insert
<   init_cfg();
<   printf("init cfg done!\n");
<   init_edge_num();
<   init_edge_prob();
< //  print_cfg();
< //TODO insert end
< 
8442c8073
< 	//update_prob_level();
---
> 
8514,8517d8144
< //TODO insert	
<     //update per seed run fuzz one
<     update_prob_per_run(queue_cur);
<   	update_bitmap_score(queue_cur); 
8519d8145
< //TODO insert end
